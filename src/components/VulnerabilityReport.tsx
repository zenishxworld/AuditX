import { useState } from 'react';
import { 
  Accordion, 
  AccordionContent, 
  AccordionItem, 
  AccordionTrigger 
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { 
  AlertTriangle, 
  XCircle, 
  AlertCircle, 
  Info,
  ChevronDown,
  Code,
  Lightbulb
} from 'lucide-react';

interface Vulnerability {
  id: string;
  title: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low' | 'Info';
  line: number;
  description: string;
  code: string;
  suggestions: string[];
}

interface VulnerabilityReportProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityReport = ({ vulnerabilities }: VulnerabilityReportProps) => {
  const [openSections, setOpenSections] = useState<string[]>(['Critical']);

  const severityConfig = {
    Critical: { 
      icon: XCircle, 
      color: 'bg-red-500/20 text-red-400 border-red-500/30',
      badge: 'bg-red-500 text-white',
      emoji: 'ðŸ”´'
    },
    High: { 
      icon: XCircle, 
      color: 'bg-red-600/20 text-red-500 border-red-600/30',
      badge: 'bg-red-600 text-white',
      emoji: 'ðŸ”´'
    },
    Medium: { 
      icon: AlertTriangle, 
      color: 'bg-orange-500/20 text-orange-400 border-orange-500/30',
      badge: 'bg-orange-500 text-white',
      emoji: 'ðŸŸ '
    },
    Low: { 
      icon: AlertCircle, 
      color: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',
      badge: 'bg-yellow-500 text-black',
      emoji: 'ðŸŸ¡'
    },
    Info: { 
      icon: Info, 
      color: 'bg-blue-500/20 text-blue-400 border-blue-500/30',
      badge: 'bg-blue-500 text-white',
      emoji: 'ðŸ”µ'
    }
  };

  const groupedVulnerabilities = vulnerabilities.reduce((acc, vuln) => {
    if (!acc[vuln.severity]) acc[vuln.severity] = [];
    acc[vuln.severity].push(vuln);
    return acc;
  }, {} as Record<string, Vulnerability[]>);

  const severityOrder = ['Critical', 'High', 'Medium', 'Low', 'Info'];

  const bestPractices = [
    'Use the latest version of Solidity compiler',
    'Implement proper access controls and permission checks',
    'Follow the checks-effects-interactions pattern',
    'Use SafeMath library for arithmetic operations',
    'Implement proper input validation and sanitization',
    'Add comprehensive unit and integration tests'
  ];

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="font-semibold text-lg text-foreground">Vulnerabilities Found</h3>
        
        <Accordion 
          type="multiple" 
          value={openSections}
          onValueChange={setOpenSections}
          className="space-y-3"
        >
          {severityOrder.map((severity) => {
            const vulns = groupedVulnerabilities[severity] || [];
            if (vulns.length === 0) return null;

            const config = severityConfig[severity as keyof typeof severityConfig];
            const Icon = config.icon;

            return (
              <AccordionItem 
                key={severity} 
                value={severity}
                className="border border-border rounded-lg bg-gradient-card overflow-hidden"
              >
                <AccordionTrigger className="px-4 py-3 hover:no-underline hover:bg-secondary/50 transition-colors">
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{config.emoji}</span>
                    <Icon className="h-5 w-5" />
                    <span className="font-medium text-foreground">
                      {severity} Issues ({vulns.length})
                    </span>
                  </div>
                </AccordionTrigger>
                
                <AccordionContent className="px-4 pb-4">
                  <div className="space-y-3">
                    {vulns.map((vuln) => (
                      <Card 
                        key={vuln.id} 
                        className={`border transition-all hover:shadow-lg ${config.color}`}
                      >
                        <CardContent className="p-4 space-y-4">
                          {/* Header */}
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium text-foreground mb-1">
                                {vuln.title}
                              </h4>
                              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                                <Code className="h-3 w-3" />
                                <span>Line {vuln.line}</span>
                              </div>
                            </div>
                            <Badge className={config.badge}>
                              {severity}
                            </Badge>
                          </div>

                          {/* Description */}
                          <p className="text-sm text-muted-foreground">
                            {vuln.description}
                          </p>

                          {/* Code Block */}
                          <div className="bg-secondary/50 rounded-md p-3 border border-border">
                            <div className="flex items-center space-x-2 mb-2">
                              <Code className="h-4 w-4 text-muted-foreground" />
                              <span className="text-xs text-muted-foreground font-mono">
                                Problematic Code
                              </span>
                            </div>
                            <pre className="text-xs font-mono text-foreground overflow-x-auto">
                              <code>{vuln.code}</code>
                            </pre>
                          </div>

                          {/* Fix Suggestions */}
                          <div className="space-y-2">
                            <div className="flex items-center space-x-2">
                              <Lightbulb className="h-4 w-4 text-yellow-500" />
                              <span className="text-sm font-medium text-foreground">
                                Fix Suggestions
                              </span>
                            </div>
                            <ul className="space-y-1 ml-6">
                              {vuln.suggestions.map((suggestion, index) => (
                                <li key={index} className="text-sm text-muted-foreground">
                                  â€¢ {suggestion}
                                </li>
                              ))}
                            </ul>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </AccordionContent>
              </AccordionItem>
            );
          })}
        </Accordion>
      </div>

      {/* Best Practices Section */}
      <Card className="bg-gradient-card border-border">
        <CardContent className="p-6">
          <div className="flex items-center space-x-2 mb-4">
            <Lightbulb className="h-5 w-5 text-yellow-500" />
            <h3 className="font-semibold text-lg text-foreground">
              Suggestions for Improvement
            </h3>
          </div>
          <ul className="space-y-2">
            {bestPractices.map((practice, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-purple-primary mt-1">â€¢</span>
                <span className="text-sm text-muted-foreground">{practice}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityReport;